// Project	Cray 1
// Entity	Floating-point  multiply Unit
// File		f_mul.hase
// Date	    Oct 2018
//
// Supposed to perform floating-point multiply but currently
// performs multiply (Integer multiply)
// Instructions may be:
//	scalar +/- scalar - needs 2 scalars in first (only) clock							fn_pkt.op[1] = 0
//	vector +/- scalar - needs 1 scalar + 1 vector in first clock then 1 vector per clock		fn_pkt.op[1] = 1
//	vector +/- vector - needs 2 vector operands per clock							fn_pkt.op[1] = 2
// Execution time: Instruction issue	1CP
// Vi ready 14CPs if (VL) <= 5
// Vi ready (VL) |+ 9 CPs if (VL) > 5
// Vj and Vk ready 5 CPs if (VL) <= 5
// Vj and Vk ready (VL) CPs if (VL) > 5
// Unit ready (VL) + 4CPS
// Chain slot ready  9 CPs
//

$class_decls

// Variable Declarations

bool opnd1_ready, opnd2_ready;
int mul_busy[9];
int i, overflow;
fn_packet fn_pkt;
t_sixtyfour_bit operand1, operand2;
s_2values op_values;

s_struct mul_result[9];		// i = dest_reg, s = 64-bit result

void perform_mul();

$class_defs

void f_mul_u::perform_mul()
{
    int op1 = 0;
    int op2 = 0;
    int ith_power = 1;
    int temp_result;
    for (i = 15; i >= 0; i--)
    {
        op1 += char_to_hex( operand1.s16[i] ) * ith_power;
        op2 += char_to_hex( operand2.s16[i] ) * ith_power;
        ith_power = ith_power * 16;
    }
    temp_result = (op1 * op2) % (16777216); 	//discard overflow
    for (i = 15; i >= 0; i--)
    {
        mul_result[0].s.s16[i] = hex_to_char( (temp_result % 16) );
        temp_result = temp_result / 16;
    }
}

$pre

opnd1_ready = false;
opnd2_ready = false;

for (i = 0; i < 9; i++)
{
    mul_busy[i] = 0;
    strcpy( mul_result[i].s.s16, "0000000000000000" );
}
my_state = IDLE;
dump_state();

$phase0

// receive instruction (if one has been sent) and operands, produce result and set pop_busy

// predicates for use in sim_waiting tests

sim_from_port from_S_REGS( from_s_regs );
sim_from_port from_V_REGS( from_v_regs );
sim_from_port from_CIP( from_cip );

for (i = 8; i > 0; i--)
{
    mul_busy[i] = mul_busy[i - 1];
    mul_result[i] = mul_result[i - 1];
}
mul_busy[0] = 0;

if (sim_waiting( ev, from_CIP ))
{
    SIM_CAST( fn_packet, fn_pkt, ev );
    opnd1_ready = false;
    opnd2_ready = false;
}

if (sim_waiting( ev, from_S_REGS ))
{
    if (ev.type() == S_1VALUE)
    {
        SIM_CAST( t_sixtyfour_bit, operand1, ev );
        opnd1_ready = true;
    }

    else if (ev.type() == S_2VALUES)
    {
        SIM_CAST( s_2values, op_values, ev );
        strcpy( operand1.s16, op_values.op1.s16 );
        strcpy( operand2.s16, op_values.op2.s16 );
        opnd1_ready = true;
        opnd2_ready = true;
    }
}								// end of if waiting from Sregs

if (sim_waiting( ev, from_V_REGS ))
{
    if (ev.type() == S_1VALUE)
    {
        SIM_CAST( t_sixtyfour_bit, operand2, ev );
        opnd2_ready = true;
    }

    else if (ev.type() == S_2VALUES)
    {
        SIM_CAST( s_2values, op_values, ev );
        strcpy( operand1.s16, op_values.op1.s16 );
        strcpy( operand2.s16, op_values.op2.s16 );
        opnd1_ready = true;
        opnd2_ready = true;
    }
}								// end of if waiting from Vregs

if (opnd1_ready && opnd2_ready)
{
    switch (fn_pkt.op[0])
    {
    case '*':										// 064 160, 161
        perform_mul();
        break;
    }
    mul_result[0].reg_no = fn_pkt.reg_no;
    mul_busy[0] = 1;
    opnd2_ready = false;
    if (fn_pkt.op[1] != '1')
    {
        opnd1_ready = false;
    }
}								// end of operands ready

if ((mul_busy[0] == 1) || (mul_busy[1] == 1) || (mul_busy[2] == 1) || (mul_busy[3] == 1) || (mul_busy[4] == 1) || (mul_busy[5] == 1) || (mul_busy[6] == 1) || (mul_busy[7] == 1) || (mul_busy[8] == 1))
{
    my_state = BUSY;
}
else
{
    my_state = IDLE;
}
dump_state();

$phase1

// if mul_busy[8] is set, send output to Sregs or V regs

if (mul_busy[8] == 1)
{
    sim_hold( 5 );
    if (fn_pkt.op[1] == '0')
    {
        send_S_PKT( to_s_regs, mul_result[8] );
    }
    else if (fn_pkt.op[1] == '1' || fn_pkt.op[1] == '2')
    {
        send_S_PKT( to_v_regs, mul_result[8] );
    }
    mul_busy[8] = 0;
}

