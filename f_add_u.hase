// Project		Cray 1
// Entity		Floating-point  Add Unit
// File		 f_add.hase
// Date		Oct 2018
//
// Supposed to perform floating-point add and subtract but currently
// performs add (Integer sum) and sub (Integer difference)
// Instructions may be:
//	scalar +/- scalar - needs 2 scalars in first (only) clock							fn_pkt.op[1] = 0
//	vector +/- scalar - needs 1 scalar + 1 vector in first clock then 1 vector per clock		fn_pkt.op[1] = 1
//	vector +/- vector - needs 2 vector operands per clock							fn_pkt.op[1] = 2
// Execution time: Instruction issue	1CP
// Vi ready 13CPs if (VL) <= 5
// Vi ready (VL) |+ 8 CPs if (VL) > 5
// Vj and Vk ready 5 CPs if (VL) <= 5
// Vj and Vk ready (VL) CPs if (VL) > 5
// Unit ready (VL) + 4CPS
// Chain slot ready  8 CPs
//

$class_decls

// Variable Declarations

 bool opnd1_ready, opnd2_ready;
 int add_busy[8];
 int i, overflow;
 fn_packet fn_pkt;
 t_sixtyfour_bit operand1, operand2;
 s_2values op_values;
 
 s_struct add_result[8];		// i = dest_reg, s = 64-bit result

 void perform_add();
 void perform_sub();

$class_defs

void f_add_u::perform_add()
{
   overflow = 0;
   for (i=15; i>=0; i--)
	{add_result[0].s.s16[i] = add_hex_digits (operand1.s16[i], operand2.s16[i], overflow);}}

void f_add_u::perform_sub()
{
   overflow = 1;				// Because s_complement result is 1's complement
   s_complement(operand2.s16);
   for (int i=15; i>=0; i--)
	{add_result[0].s.s16[i] = add_hex_digits (operand1.s16[i], operand2.s16[i], overflow);}}

$pre

 opnd1_ready = false;
 opnd2_ready = false;

 for (i=0; i<8; i++)
  {
   add_busy[i] = 0;
   strcpy(add_result[i].s.s16, "0000000000000000");
  }
 my_state = IDLE;
 dump_state();

$phase0

// receive instruction (if one has been sent) and operands, produce result and set pop_busy

// predicates for use in sim_waiting tests

 sim_from_port from_S_REGS(from_s_regs);
 sim_from_port from_V_REGS(from_v_regs);
 sim_from_port from_CIP(from_cip);

 for (i=7; i>0; i--)
  {
   add_busy[i] = add_busy[i-1];
   add_result[i] = add_result[i-1];
  }
 add_busy[0] = 0;

 if (sim_waiting(ev, from_CIP))
  {
   SIM_CAST(fn_packet, fn_pkt, ev);
   opnd1_ready = false;
   opnd2_ready = false;
  }

 if (sim_waiting(ev, from_S_REGS))
  {
   if (ev.type() == S_1VALUE)									// 170, 172
    {
     SIM_CAST(t_sixtyfour_bit, operand1, ev);
     opnd1_ready = true;
    }

   else if (ev.type() == S_2VALUES)							// 062, 063
    {
     SIM_CAST(s_2values, op_values, ev);
     strcpy (operand1.s16, op_values.op1.s16);
     strcpy (operand2.s16, op_values.op2.s16);
     opnd1_ready = true;
     opnd2_ready = true;
    }
   }								// end of if waiting from Sregs

 if (sim_waiting(ev, from_V_REGS))
  {
   if (ev.type() == S_1VALUE)									// 170, 172
    {
     SIM_CAST(t_sixtyfour_bit, operand2, ev);
     opnd2_ready = true;
    }

   else if (ev.type() == S_2VALUES)							// 171, 173
    {
     SIM_CAST(s_2values, op_values, ev);
     strcpy (operand1.s16, op_values.op1.s16);
     strcpy (operand2.s16, op_values.op2.s16);
     opnd1_ready = true;
     opnd2_ready = true; 
    }
  }								// end of if waiting from Vregs

 if (opnd1_ready && opnd2_ready)
  {
    switch (fn_pkt.op[0] )
     {
	case '+':										// 170, 171
	   perform_add();
	   break;
	case '-':										// 172, 173
	   perform_sub();
	   break;
     }
    add_result[0].reg_no = fn_pkt.reg_no;
    add_busy[0] = 1;
    opnd2_ready = false;
    if(fn_pkt.op[1] != '1')
     {opnd1_ready = false;}
  }								// end of operands ready

 if ((add_busy[0] ==1) || (add_busy[1] ==1) || (add_busy[2] == 1) || (add_busy[3] == 1) || (add_busy[4] ==1) || (add_busy[5] == 1) || (add_busy[6] == 1) || (add_busy[7] == 1))
  {my_state = BUSY;}
 else
  {my_state = IDLE; }
  dump_state();

$phase1

// if add_busy[7] is set, send output to Sregs or V regs

 if (add_busy[7] == 1)
  {
   sim_hold(5);
   if (fn_pkt.op[1] == '0')
    {send_S_PKT( to_s_regs, add_result[7] );}
   else if (fn_pkt.op[1] == '1' || fn_pkt.op[1] == '2')
    {send_S_PKT( to_v_regs, add_result[7] );}
    add_busy[7] = 0;
   }

