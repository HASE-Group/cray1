// Project		Cray 1
// Entity		Scalar Add Unit
// File		 a_add.hase
// Date		Oct 2017
//
// Performs add (Integer sum) and sub (Integer difference)
//  

$class_decls

// Variable Declarations

bool add_busy0, add_busy1, add_busy2;
int overflow;
s_2values op_values;
fn_packet fn_pkt;
s_struct add_result[3];		// i = dest_reg, s = 64-bit result

void perform_add();
void perform_sub();

$class_defs

void s_add_u::perform_add()
{
    overflow = 0;
    for (int i = 15; i >= 0; i--)
        add_result[0].s.s16[i] = add_hex_digits( op_values.op1.s16[i], op_values.op2.s16[i], overflow );
}

void s_add_u::perform_sub()
{
    overflow = 1;				// Because a_complement result is 1's complement
    s_complement( op_values.op2.s16 );
    //printf("S_ADD_U: subtract op1 = %s \n", op_values.op1.s16);
    //printf("S_ADD_U: subtract op2 complemented = %s \n", op_values.op2.s16);
    for (int i = 15; i >= 0; i--)
        add_result[0].s.s16[i] = add_hex_digits( op_values.op1.s16[i], op_values.op2.s16[i], overflow );
}


$pre

add_busy0 = false;
add_busy1 = false;
add_busy2 = false;
my_state = IDLE;
dump_state();

$phase0

// receive instruction (if one has been sent) and operands, produce result and set pop_busy

// predicates for use in sim_waiting tests

sim_from_port from_S_REGS( from_s_regs );
sim_from_port from_CIP( from_cip );

add_busy2 = add_busy1;
add_busy1 = add_busy0;
add_busy0 = false;
add_result[2] = add_result[1];
add_result[1] = add_result[0];
if (sim_waiting( ev, from_CIP ))
{
    SIM_CAST( fn_packet, fn_pkt, ev );
    add_busy0 = true;
}

if (add_busy0 || add_busy1 || add_busy2)
{
    my_state = BUSY;
}
else
{
    my_state = IDLE;
}

if (sim_waiting( ev, from_S_REGS ))
{
    SIM_CAST( s_2values, op_values, ev );
    switch (fn_pkt.op[0])
    {
    case '+':
        perform_add();
        break;
    case '-':
        perform_sub();
        break;
    }
    add_result[0].reg_no = fn_pkt.reg_no;
}
dump_state();

$phase1

// if add_busy2 is set, send output to S regs

if (add_busy2)
{
    sim_hold( 5 );
    send_S_PKT( to_s_regs, add_result[2] );
    add_busy2 = false;
}

