// Project		Cray 1
// Entity		Vector Add Unit
// File		 v_add.hase
// Date		Jun 2018
//
// Performs add (Integer sum) and sub (Integer difference)
//  

$class_decls

// Variable Declarations

bool add_busy0, add_busy1, add_busy2;
int overflow;
fn_packet fn_pkt;
t_sixtyfour_bit operand1, operand2;
s_2values op_values;

s_struct add_result[3];		// i = dest_reg, s = 64-bit result

void perform_add();
void perform_sub();

$class_defs

void v_add_u::perform_add()
{
    overflow = 0;
    for (int i = 15; i >= 0; i--)
    {
        add_result[0].s.s16[i] = add_hex_digits( operand1.s16[i], operand2.s16[i], overflow );
    }
    //printf("V_ADD_U: Add operation - operand1 = %s,  operand2 = %s,  result = %s \n", operand1.s16, operand2.s16, add_result[0].s.s16);
}

void v_add_u::perform_sub()
{
    overflow = 1;				// Because s_complement result is 1's complement
    s_complement( operand2.s16 );
    for (int i = 15; i >= 0; i--)
    {
        add_result[0].s.s16[i] = add_hex_digits( operand1.s16[i], operand2.s16[i], overflow );
    }
    printf( "V_ADD_U: Subtract operation - operand1 = %s,  operand2.comp = %s,  result = %s \n", operand1.s16, operand2.s16, add_result[0].s.s16 );
}

$pre

add_busy0 = false;
add_busy1 = false;
add_busy2 = false;
for (int i = 0; i < 3; i++)
{
    strcpy( add_result[i].s.s16, "0000000000000000" );
}
my_state = IDLE;
dump_state();

$phase0

// receive instruction (if one has been sent) and operands, produce result and set pop_busy

// predicates for use in sim_waiting tests

sim_from_port from_S_REGS( from_s_regs );
sim_from_port from_V_REGS( from_v_regs );
sim_from_port from_CIP( from_cip );

add_busy2 = add_busy1;
add_busy1 = add_busy0;
add_busy0 = false;
add_result[2] = add_result[1];
add_result[1] = add_result[0];

if (sim_waiting( ev, from_CIP ))
{
    SIM_CAST( fn_packet, fn_pkt, ev );
}

if (sim_waiting( ev, from_S_REGS ))
{
    SIM_CAST( t_sixtyfour_bit, operand1, ev );
}

if (sim_waiting( ev, from_V_REGS ))
{
    if (ev.type() == S_1VALUE)
    {
        SIM_CAST( t_sixtyfour_bit, operand2, ev );
    }

    else if (ev.type() == S_2VALUES)
    {
        SIM_CAST( s_2values, op_values, ev );
        strcpy( operand1.s16, op_values.op1.s16 );
        strcpy( operand2.s16, op_values.op2.s16 );
    }
    add_busy0 = true;
    switch (fn_pkt.op[0])
    {
    case '+':
        perform_add();
        break;
    case '-':
        perform_sub();
        break;
    }
    add_result[0].reg_no = fn_pkt.reg_no;
}					// end of if waiting from Vregs

if (add_busy0 || add_busy1 || add_busy2)
{
    my_state = BUSY;
}
else
{
    my_state = IDLE;
}
dump_state();

$phase1

// if add_busy2 is set, send output to V regs

if (add_busy2)
{
    sim_hold( 5 );
    send_S_PKT( to_v_regs, add_result[2] );
    add_busy2 = false;
}

